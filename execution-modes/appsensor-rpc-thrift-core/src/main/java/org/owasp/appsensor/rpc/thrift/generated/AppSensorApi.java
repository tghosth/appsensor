/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.owasp.appsensor.rpc.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppSensorApi {

  public interface Iface {

    public void addEvent(Event event, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException;

    public void addAttack(Attack attack, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException;

    public List<Response> getResponses(String earliest, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addEvent(Event event, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addEvent_call> resultHandler) throws org.apache.thrift.TException;

    public void addAttack(Attack attack, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAttack_call> resultHandler) throws org.apache.thrift.TException;

    public void getResponses(String earliest, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getResponses_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addEvent(Event event, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      send_addEvent(event, clientApplicationName);
      recv_addEvent();
    }

    public void send_addEvent(Event event, String clientApplicationName) throws org.apache.thrift.TException
    {
      addEvent_args args = new addEvent_args();
      args.setEvent(event);
      args.setClientApplicationName(clientApplicationName);
      sendBase("addEvent", args);
    }

    public void recv_addEvent() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      addEvent_result result = new addEvent_result();
      receiveBase(result, "addEvent");
      if (result.notAuthenticatedException != null) {
        throw result.notAuthenticatedException;
      }
      if (result.notAuthorizedException != null) {
        throw result.notAuthorizedException;
      }
      return;
    }

    public void addAttack(Attack attack, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      send_addAttack(attack, clientApplicationName);
      recv_addAttack();
    }

    public void send_addAttack(Attack attack, String clientApplicationName) throws org.apache.thrift.TException
    {
      addAttack_args args = new addAttack_args();
      args.setAttack(attack);
      args.setClientApplicationName(clientApplicationName);
      sendBase("addAttack", args);
    }

    public void recv_addAttack() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      addAttack_result result = new addAttack_result();
      receiveBase(result, "addAttack");
      if (result.notAuthenticatedException != null) {
        throw result.notAuthenticatedException;
      }
      if (result.notAuthorizedException != null) {
        throw result.notAuthorizedException;
      }
      return;
    }

    public List<Response> getResponses(String earliest, String clientApplicationName) throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      send_getResponses(earliest, clientApplicationName);
      return recv_getResponses();
    }

    public void send_getResponses(String earliest, String clientApplicationName) throws org.apache.thrift.TException
    {
      getResponses_args args = new getResponses_args();
      args.setEarliest(earliest);
      args.setClientApplicationName(clientApplicationName);
      sendBase("getResponses", args);
    }

    public List<Response> recv_getResponses() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException
    {
      getResponses_result result = new getResponses_result();
      receiveBase(result, "getResponses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.notAuthenticatedException != null) {
        throw result.notAuthenticatedException;
      }
      if (result.notAuthorizedException != null) {
        throw result.notAuthorizedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResponses failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addEvent(Event event, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<addEvent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEvent_call method_call = new addEvent_call(event, clientApplicationName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Event event;
      private String clientApplicationName;
      public addEvent_call(Event event, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<addEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.event = event;
        this.clientApplicationName = clientApplicationName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEvent_args args = new addEvent_args();
        args.setEvent(event);
        args.setClientApplicationName(clientApplicationName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addEvent();
      }
    }

    public void addAttack(Attack attack, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<addAttack_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAttack_call method_call = new addAttack_call(attack, clientApplicationName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAttack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Attack attack;
      private String clientApplicationName;
      public addAttack_call(Attack attack, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<addAttack_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attack = attack;
        this.clientApplicationName = clientApplicationName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAttack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAttack_args args = new addAttack_args();
        args.setAttack(attack);
        args.setClientApplicationName(clientApplicationName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAttack();
      }
    }

    public void getResponses(String earliest, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<getResponses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResponses_call method_call = new getResponses_call(earliest, clientApplicationName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResponses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String earliest;
      private String clientApplicationName;
      public getResponses_call(String earliest, String clientApplicationName, org.apache.thrift.async.AsyncMethodCallback<getResponses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.earliest = earliest;
        this.clientApplicationName = clientApplicationName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResponses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResponses_args args = new getResponses_args();
        args.setEarliest(earliest);
        args.setClientApplicationName(clientApplicationName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Response> getResult() throws NotAuthenticatedException, NotAuthorizedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResponses();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addEvent", new addEvent());
      processMap.put("addAttack", new addAttack());
      processMap.put("getResponses", new getResponses());
      return processMap;
    }

    public static class addEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEvent_args> {
      public addEvent() {
        super("addEvent");
      }

      public addEvent_args getEmptyArgsInstance() {
        return new addEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addEvent_result getResult(I iface, addEvent_args args) throws org.apache.thrift.TException {
        addEvent_result result = new addEvent_result();
        try {
          iface.addEvent(args.event, args.clientApplicationName);
        } catch (NotAuthenticatedException notAuthenticatedException) {
          result.notAuthenticatedException = notAuthenticatedException;
        } catch (NotAuthorizedException notAuthorizedException) {
          result.notAuthorizedException = notAuthorizedException;
        }
        return result;
      }
    }

    public static class addAttack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAttack_args> {
      public addAttack() {
        super("addAttack");
      }

      public addAttack_args getEmptyArgsInstance() {
        return new addAttack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAttack_result getResult(I iface, addAttack_args args) throws org.apache.thrift.TException {
        addAttack_result result = new addAttack_result();
        try {
          iface.addAttack(args.attack, args.clientApplicationName);
        } catch (NotAuthenticatedException notAuthenticatedException) {
          result.notAuthenticatedException = notAuthenticatedException;
        } catch (NotAuthorizedException notAuthorizedException) {
          result.notAuthorizedException = notAuthorizedException;
        }
        return result;
      }
    }

    public static class getResponses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResponses_args> {
      public getResponses() {
        super("getResponses");
      }

      public getResponses_args getEmptyArgsInstance() {
        return new getResponses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getResponses_result getResult(I iface, getResponses_args args) throws org.apache.thrift.TException {
        getResponses_result result = new getResponses_result();
        try {
          result.success = iface.getResponses(args.earliest, args.clientApplicationName);
        } catch (NotAuthenticatedException notAuthenticatedException) {
          result.notAuthenticatedException = notAuthenticatedException;
        } catch (NotAuthorizedException notAuthorizedException) {
          result.notAuthorizedException = notAuthorizedException;
        }
        return result;
      }
    }

  }

  public static class addEvent_args implements org.apache.thrift.TBase<addEvent_args, addEvent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientApplicationName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEvent_argsTupleSchemeFactory());
    }

    public Event event; // required
    public String clientApplicationName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT((short)1, "event"),
      CLIENT_APPLICATION_NAME((short)2, "clientApplicationName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT
            return EVENT;
          case 2: // CLIENT_APPLICATION_NAME
            return CLIENT_APPLICATION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class)));
      tmpMap.put(_Fields.CLIENT_APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientApplicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_args.class, metaDataMap);
    }

    public addEvent_args() {
    }

    public addEvent_args(
      Event event,
      String clientApplicationName)
    {
      this();
      this.event = event;
      this.clientApplicationName = clientApplicationName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvent_args(addEvent_args other) {
      if (other.isSetEvent()) {
        this.event = new Event(other.event);
      }
      if (other.isSetClientApplicationName()) {
        this.clientApplicationName = other.clientApplicationName;
      }
    }

    public addEvent_args deepCopy() {
      return new addEvent_args(this);
    }

    @Override
    public void clear() {
      this.event = null;
      this.clientApplicationName = null;
    }

    public Event getEvent() {
      return this.event;
    }

    public addEvent_args setEvent(Event event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    public String getClientApplicationName() {
      return this.clientApplicationName;
    }

    public addEvent_args setClientApplicationName(String clientApplicationName) {
      this.clientApplicationName = clientApplicationName;
      return this;
    }

    public void unsetClientApplicationName() {
      this.clientApplicationName = null;
    }

    /** Returns true if field clientApplicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetClientApplicationName() {
      return this.clientApplicationName != null;
    }

    public void setClientApplicationNameIsSet(boolean value) {
      if (!value) {
        this.clientApplicationName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((Event)value);
        }
        break;

      case CLIENT_APPLICATION_NAME:
        if (value == null) {
          unsetClientApplicationName();
        } else {
          setClientApplicationName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT:
        return getEvent();

      case CLIENT_APPLICATION_NAME:
        return getClientApplicationName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT:
        return isSetEvent();
      case CLIENT_APPLICATION_NAME:
        return isSetClientApplicationName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvent_args)
        return this.equals((addEvent_args)that);
      return false;
    }

    public boolean equals(addEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      boolean this_present_clientApplicationName = true && this.isSetClientApplicationName();
      boolean that_present_clientApplicationName = true && that.isSetClientApplicationName();
      if (this_present_clientApplicationName || that_present_clientApplicationName) {
        if (!(this_present_clientApplicationName && that_present_clientApplicationName))
          return false;
        if (!this.clientApplicationName.equals(that.clientApplicationName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addEvent_args typedOther = (addEvent_args)other;

      lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, typedOther.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientApplicationName()).compareTo(typedOther.isSetClientApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientApplicationName, typedOther.clientApplicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvent_args(");
      boolean first = true;

      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientApplicationName:");
      if (this.clientApplicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientApplicationName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (event != null) {
        event.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvent_argsStandardSchemeFactory implements SchemeFactory {
      public addEvent_argsStandardScheme getScheme() {
        return new addEvent_argsStandardScheme();
      }
    }

    private static class addEvent_argsStandardScheme extends StandardScheme<addEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new Event();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientApplicationName = iprot.readString();
                struct.setClientApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientApplicationName != null) {
          oprot.writeFieldBegin(CLIENT_APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.clientApplicationName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvent_argsTupleSchemeFactory implements SchemeFactory {
      public addEvent_argsTupleScheme getScheme() {
        return new addEvent_argsTupleScheme();
      }
    }

    private static class addEvent_argsTupleScheme extends TupleScheme<addEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEvent()) {
          optionals.set(0);
        }
        if (struct.isSetClientApplicationName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
        if (struct.isSetClientApplicationName()) {
          oprot.writeString(struct.clientApplicationName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.event = new Event();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientApplicationName = iprot.readString();
          struct.setClientApplicationNameIsSet(true);
        }
      }
    }

  }

  public static class addEvent_result implements org.apache.thrift.TBase<addEvent_result, addEvent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_result");

    private static final org.apache.thrift.protocol.TField NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthenticatedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_AUTHORIZED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthorizedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEvent_resultTupleSchemeFactory());
    }

    public NotAuthenticatedException notAuthenticatedException; // required
    public NotAuthorizedException notAuthorizedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOT_AUTHENTICATED_EXCEPTION((short)1, "notAuthenticatedException"),
      NOT_AUTHORIZED_EXCEPTION((short)2, "notAuthorizedException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOT_AUTHENTICATED_EXCEPTION
            return NOT_AUTHENTICATED_EXCEPTION;
          case 2: // NOT_AUTHORIZED_EXCEPTION
            return NOT_AUTHORIZED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOT_AUTHENTICATED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthenticatedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_AUTHORIZED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthorizedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_result.class, metaDataMap);
    }

    public addEvent_result() {
    }

    public addEvent_result(
      NotAuthenticatedException notAuthenticatedException,
      NotAuthorizedException notAuthorizedException)
    {
      this();
      this.notAuthenticatedException = notAuthenticatedException;
      this.notAuthorizedException = notAuthorizedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvent_result(addEvent_result other) {
      if (other.isSetNotAuthenticatedException()) {
        this.notAuthenticatedException = new NotAuthenticatedException(other.notAuthenticatedException);
      }
      if (other.isSetNotAuthorizedException()) {
        this.notAuthorizedException = new NotAuthorizedException(other.notAuthorizedException);
      }
    }

    public addEvent_result deepCopy() {
      return new addEvent_result(this);
    }

    @Override
    public void clear() {
      this.notAuthenticatedException = null;
      this.notAuthorizedException = null;
    }

    public NotAuthenticatedException getNotAuthenticatedException() {
      return this.notAuthenticatedException;
    }

    public addEvent_result setNotAuthenticatedException(NotAuthenticatedException notAuthenticatedException) {
      this.notAuthenticatedException = notAuthenticatedException;
      return this;
    }

    public void unsetNotAuthenticatedException() {
      this.notAuthenticatedException = null;
    }

    /** Returns true if field notAuthenticatedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthenticatedException() {
      return this.notAuthenticatedException != null;
    }

    public void setNotAuthenticatedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthenticatedException = null;
      }
    }

    public NotAuthorizedException getNotAuthorizedException() {
      return this.notAuthorizedException;
    }

    public addEvent_result setNotAuthorizedException(NotAuthorizedException notAuthorizedException) {
      this.notAuthorizedException = notAuthorizedException;
      return this;
    }

    public void unsetNotAuthorizedException() {
      this.notAuthorizedException = null;
    }

    /** Returns true if field notAuthorizedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthorizedException() {
      return this.notAuthorizedException != null;
    }

    public void setNotAuthorizedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthorizedException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        if (value == null) {
          unsetNotAuthenticatedException();
        } else {
          setNotAuthenticatedException((NotAuthenticatedException)value);
        }
        break;

      case NOT_AUTHORIZED_EXCEPTION:
        if (value == null) {
          unsetNotAuthorizedException();
        } else {
          setNotAuthorizedException((NotAuthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        return getNotAuthenticatedException();

      case NOT_AUTHORIZED_EXCEPTION:
        return getNotAuthorizedException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        return isSetNotAuthenticatedException();
      case NOT_AUTHORIZED_EXCEPTION:
        return isSetNotAuthorizedException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvent_result)
        return this.equals((addEvent_result)that);
      return false;
    }

    public boolean equals(addEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_notAuthenticatedException = true && this.isSetNotAuthenticatedException();
      boolean that_present_notAuthenticatedException = true && that.isSetNotAuthenticatedException();
      if (this_present_notAuthenticatedException || that_present_notAuthenticatedException) {
        if (!(this_present_notAuthenticatedException && that_present_notAuthenticatedException))
          return false;
        if (!this.notAuthenticatedException.equals(that.notAuthenticatedException))
          return false;
      }

      boolean this_present_notAuthorizedException = true && this.isSetNotAuthorizedException();
      boolean that_present_notAuthorizedException = true && that.isSetNotAuthorizedException();
      if (this_present_notAuthorizedException || that_present_notAuthorizedException) {
        if (!(this_present_notAuthorizedException && that_present_notAuthorizedException))
          return false;
        if (!this.notAuthorizedException.equals(that.notAuthorizedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addEvent_result typedOther = (addEvent_result)other;

      lastComparison = Boolean.valueOf(isSetNotAuthenticatedException()).compareTo(typedOther.isSetNotAuthenticatedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthenticatedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthenticatedException, typedOther.notAuthenticatedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotAuthorizedException()).compareTo(typedOther.isSetNotAuthorizedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthorizedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthorizedException, typedOther.notAuthorizedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvent_result(");
      boolean first = true;

      sb.append("notAuthenticatedException:");
      if (this.notAuthenticatedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthenticatedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notAuthorizedException:");
      if (this.notAuthorizedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthorizedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvent_resultStandardSchemeFactory implements SchemeFactory {
      public addEvent_resultStandardScheme getScheme() {
        return new addEvent_resultStandardScheme();
      }
    }

    private static class addEvent_resultStandardScheme extends StandardScheme<addEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOT_AUTHENTICATED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthenticatedException = new NotAuthenticatedException();
                struct.notAuthenticatedException.read(iprot);
                struct.setNotAuthenticatedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_AUTHORIZED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthorizedException = new NotAuthorizedException();
                struct.notAuthorizedException.read(iprot);
                struct.setNotAuthorizedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notAuthenticatedException != null) {
          oprot.writeFieldBegin(NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC);
          struct.notAuthenticatedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notAuthorizedException != null) {
          oprot.writeFieldBegin(NOT_AUTHORIZED_EXCEPTION_FIELD_DESC);
          struct.notAuthorizedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvent_resultTupleSchemeFactory implements SchemeFactory {
      public addEvent_resultTupleScheme getScheme() {
        return new addEvent_resultTupleScheme();
      }
    }

    private static class addEvent_resultTupleScheme extends TupleScheme<addEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotAuthenticatedException()) {
          optionals.set(0);
        }
        if (struct.isSetNotAuthorizedException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNotAuthenticatedException()) {
          struct.notAuthenticatedException.write(oprot);
        }
        if (struct.isSetNotAuthorizedException()) {
          struct.notAuthorizedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.notAuthenticatedException = new NotAuthenticatedException();
          struct.notAuthenticatedException.read(iprot);
          struct.setNotAuthenticatedExceptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notAuthorizedException = new NotAuthorizedException();
          struct.notAuthorizedException.read(iprot);
          struct.setNotAuthorizedExceptionIsSet(true);
        }
      }
    }

  }

  public static class addAttack_args implements org.apache.thrift.TBase<addAttack_args, addAttack_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttack_args");

    private static final org.apache.thrift.protocol.TField ATTACK_FIELD_DESC = new org.apache.thrift.protocol.TField("attack", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientApplicationName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttack_argsTupleSchemeFactory());
    }

    public Attack attack; // required
    public String clientApplicationName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTACK((short)1, "attack"),
      CLIENT_APPLICATION_NAME((short)2, "clientApplicationName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTACK
            return ATTACK;
          case 2: // CLIENT_APPLICATION_NAME
            return CLIENT_APPLICATION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTACK, new org.apache.thrift.meta_data.FieldMetaData("attack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attack.class)));
      tmpMap.put(_Fields.CLIENT_APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientApplicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttack_args.class, metaDataMap);
    }

    public addAttack_args() {
    }

    public addAttack_args(
      Attack attack,
      String clientApplicationName)
    {
      this();
      this.attack = attack;
      this.clientApplicationName = clientApplicationName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttack_args(addAttack_args other) {
      if (other.isSetAttack()) {
        this.attack = new Attack(other.attack);
      }
      if (other.isSetClientApplicationName()) {
        this.clientApplicationName = other.clientApplicationName;
      }
    }

    public addAttack_args deepCopy() {
      return new addAttack_args(this);
    }

    @Override
    public void clear() {
      this.attack = null;
      this.clientApplicationName = null;
    }

    public Attack getAttack() {
      return this.attack;
    }

    public addAttack_args setAttack(Attack attack) {
      this.attack = attack;
      return this;
    }

    public void unsetAttack() {
      this.attack = null;
    }

    /** Returns true if field attack is set (has been assigned a value) and false otherwise */
    public boolean isSetAttack() {
      return this.attack != null;
    }

    public void setAttackIsSet(boolean value) {
      if (!value) {
        this.attack = null;
      }
    }

    public String getClientApplicationName() {
      return this.clientApplicationName;
    }

    public addAttack_args setClientApplicationName(String clientApplicationName) {
      this.clientApplicationName = clientApplicationName;
      return this;
    }

    public void unsetClientApplicationName() {
      this.clientApplicationName = null;
    }

    /** Returns true if field clientApplicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetClientApplicationName() {
      return this.clientApplicationName != null;
    }

    public void setClientApplicationNameIsSet(boolean value) {
      if (!value) {
        this.clientApplicationName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTACK:
        if (value == null) {
          unsetAttack();
        } else {
          setAttack((Attack)value);
        }
        break;

      case CLIENT_APPLICATION_NAME:
        if (value == null) {
          unsetClientApplicationName();
        } else {
          setClientApplicationName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTACK:
        return getAttack();

      case CLIENT_APPLICATION_NAME:
        return getClientApplicationName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTACK:
        return isSetAttack();
      case CLIENT_APPLICATION_NAME:
        return isSetClientApplicationName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttack_args)
        return this.equals((addAttack_args)that);
      return false;
    }

    public boolean equals(addAttack_args that) {
      if (that == null)
        return false;

      boolean this_present_attack = true && this.isSetAttack();
      boolean that_present_attack = true && that.isSetAttack();
      if (this_present_attack || that_present_attack) {
        if (!(this_present_attack && that_present_attack))
          return false;
        if (!this.attack.equals(that.attack))
          return false;
      }

      boolean this_present_clientApplicationName = true && this.isSetClientApplicationName();
      boolean that_present_clientApplicationName = true && that.isSetClientApplicationName();
      if (this_present_clientApplicationName || that_present_clientApplicationName) {
        if (!(this_present_clientApplicationName && that_present_clientApplicationName))
          return false;
        if (!this.clientApplicationName.equals(that.clientApplicationName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAttack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAttack_args typedOther = (addAttack_args)other;

      lastComparison = Boolean.valueOf(isSetAttack()).compareTo(typedOther.isSetAttack());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttack()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attack, typedOther.attack);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientApplicationName()).compareTo(typedOther.isSetClientApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientApplicationName, typedOther.clientApplicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttack_args(");
      boolean first = true;

      sb.append("attack:");
      if (this.attack == null) {
        sb.append("null");
      } else {
        sb.append(this.attack);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientApplicationName:");
      if (this.clientApplicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientApplicationName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (attack != null) {
        attack.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttack_argsStandardSchemeFactory implements SchemeFactory {
      public addAttack_argsStandardScheme getScheme() {
        return new addAttack_argsStandardScheme();
      }
    }

    private static class addAttack_argsStandardScheme extends StandardScheme<addAttack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attack = new Attack();
                struct.attack.read(iprot);
                struct.setAttackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientApplicationName = iprot.readString();
                struct.setClientApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.attack != null) {
          oprot.writeFieldBegin(ATTACK_FIELD_DESC);
          struct.attack.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientApplicationName != null) {
          oprot.writeFieldBegin(CLIENT_APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.clientApplicationName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttack_argsTupleSchemeFactory implements SchemeFactory {
      public addAttack_argsTupleScheme getScheme() {
        return new addAttack_argsTupleScheme();
      }
    }

    private static class addAttack_argsTupleScheme extends TupleScheme<addAttack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttack()) {
          optionals.set(0);
        }
        if (struct.isSetClientApplicationName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAttack()) {
          struct.attack.write(oprot);
        }
        if (struct.isSetClientApplicationName()) {
          oprot.writeString(struct.clientApplicationName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.attack = new Attack();
          struct.attack.read(iprot);
          struct.setAttackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientApplicationName = iprot.readString();
          struct.setClientApplicationNameIsSet(true);
        }
      }
    }

  }

  public static class addAttack_result implements org.apache.thrift.TBase<addAttack_result, addAttack_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttack_result");

    private static final org.apache.thrift.protocol.TField NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthenticatedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_AUTHORIZED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthorizedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttack_resultTupleSchemeFactory());
    }

    public NotAuthenticatedException notAuthenticatedException; // required
    public NotAuthorizedException notAuthorizedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOT_AUTHENTICATED_EXCEPTION((short)1, "notAuthenticatedException"),
      NOT_AUTHORIZED_EXCEPTION((short)2, "notAuthorizedException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOT_AUTHENTICATED_EXCEPTION
            return NOT_AUTHENTICATED_EXCEPTION;
          case 2: // NOT_AUTHORIZED_EXCEPTION
            return NOT_AUTHORIZED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOT_AUTHENTICATED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthenticatedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_AUTHORIZED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthorizedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttack_result.class, metaDataMap);
    }

    public addAttack_result() {
    }

    public addAttack_result(
      NotAuthenticatedException notAuthenticatedException,
      NotAuthorizedException notAuthorizedException)
    {
      this();
      this.notAuthenticatedException = notAuthenticatedException;
      this.notAuthorizedException = notAuthorizedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttack_result(addAttack_result other) {
      if (other.isSetNotAuthenticatedException()) {
        this.notAuthenticatedException = new NotAuthenticatedException(other.notAuthenticatedException);
      }
      if (other.isSetNotAuthorizedException()) {
        this.notAuthorizedException = new NotAuthorizedException(other.notAuthorizedException);
      }
    }

    public addAttack_result deepCopy() {
      return new addAttack_result(this);
    }

    @Override
    public void clear() {
      this.notAuthenticatedException = null;
      this.notAuthorizedException = null;
    }

    public NotAuthenticatedException getNotAuthenticatedException() {
      return this.notAuthenticatedException;
    }

    public addAttack_result setNotAuthenticatedException(NotAuthenticatedException notAuthenticatedException) {
      this.notAuthenticatedException = notAuthenticatedException;
      return this;
    }

    public void unsetNotAuthenticatedException() {
      this.notAuthenticatedException = null;
    }

    /** Returns true if field notAuthenticatedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthenticatedException() {
      return this.notAuthenticatedException != null;
    }

    public void setNotAuthenticatedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthenticatedException = null;
      }
    }

    public NotAuthorizedException getNotAuthorizedException() {
      return this.notAuthorizedException;
    }

    public addAttack_result setNotAuthorizedException(NotAuthorizedException notAuthorizedException) {
      this.notAuthorizedException = notAuthorizedException;
      return this;
    }

    public void unsetNotAuthorizedException() {
      this.notAuthorizedException = null;
    }

    /** Returns true if field notAuthorizedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthorizedException() {
      return this.notAuthorizedException != null;
    }

    public void setNotAuthorizedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthorizedException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        if (value == null) {
          unsetNotAuthenticatedException();
        } else {
          setNotAuthenticatedException((NotAuthenticatedException)value);
        }
        break;

      case NOT_AUTHORIZED_EXCEPTION:
        if (value == null) {
          unsetNotAuthorizedException();
        } else {
          setNotAuthorizedException((NotAuthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        return getNotAuthenticatedException();

      case NOT_AUTHORIZED_EXCEPTION:
        return getNotAuthorizedException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOT_AUTHENTICATED_EXCEPTION:
        return isSetNotAuthenticatedException();
      case NOT_AUTHORIZED_EXCEPTION:
        return isSetNotAuthorizedException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttack_result)
        return this.equals((addAttack_result)that);
      return false;
    }

    public boolean equals(addAttack_result that) {
      if (that == null)
        return false;

      boolean this_present_notAuthenticatedException = true && this.isSetNotAuthenticatedException();
      boolean that_present_notAuthenticatedException = true && that.isSetNotAuthenticatedException();
      if (this_present_notAuthenticatedException || that_present_notAuthenticatedException) {
        if (!(this_present_notAuthenticatedException && that_present_notAuthenticatedException))
          return false;
        if (!this.notAuthenticatedException.equals(that.notAuthenticatedException))
          return false;
      }

      boolean this_present_notAuthorizedException = true && this.isSetNotAuthorizedException();
      boolean that_present_notAuthorizedException = true && that.isSetNotAuthorizedException();
      if (this_present_notAuthorizedException || that_present_notAuthorizedException) {
        if (!(this_present_notAuthorizedException && that_present_notAuthorizedException))
          return false;
        if (!this.notAuthorizedException.equals(that.notAuthorizedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAttack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAttack_result typedOther = (addAttack_result)other;

      lastComparison = Boolean.valueOf(isSetNotAuthenticatedException()).compareTo(typedOther.isSetNotAuthenticatedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthenticatedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthenticatedException, typedOther.notAuthenticatedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotAuthorizedException()).compareTo(typedOther.isSetNotAuthorizedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthorizedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthorizedException, typedOther.notAuthorizedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttack_result(");
      boolean first = true;

      sb.append("notAuthenticatedException:");
      if (this.notAuthenticatedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthenticatedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notAuthorizedException:");
      if (this.notAuthorizedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthorizedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttack_resultStandardSchemeFactory implements SchemeFactory {
      public addAttack_resultStandardScheme getScheme() {
        return new addAttack_resultStandardScheme();
      }
    }

    private static class addAttack_resultStandardScheme extends StandardScheme<addAttack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOT_AUTHENTICATED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthenticatedException = new NotAuthenticatedException();
                struct.notAuthenticatedException.read(iprot);
                struct.setNotAuthenticatedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_AUTHORIZED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthorizedException = new NotAuthorizedException();
                struct.notAuthorizedException.read(iprot);
                struct.setNotAuthorizedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.notAuthenticatedException != null) {
          oprot.writeFieldBegin(NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC);
          struct.notAuthenticatedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notAuthorizedException != null) {
          oprot.writeFieldBegin(NOT_AUTHORIZED_EXCEPTION_FIELD_DESC);
          struct.notAuthorizedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttack_resultTupleSchemeFactory implements SchemeFactory {
      public addAttack_resultTupleScheme getScheme() {
        return new addAttack_resultTupleScheme();
      }
    }

    private static class addAttack_resultTupleScheme extends TupleScheme<addAttack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNotAuthenticatedException()) {
          optionals.set(0);
        }
        if (struct.isSetNotAuthorizedException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNotAuthenticatedException()) {
          struct.notAuthenticatedException.write(oprot);
        }
        if (struct.isSetNotAuthorizedException()) {
          struct.notAuthorizedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.notAuthenticatedException = new NotAuthenticatedException();
          struct.notAuthenticatedException.read(iprot);
          struct.setNotAuthenticatedExceptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notAuthorizedException = new NotAuthorizedException();
          struct.notAuthorizedException.read(iprot);
          struct.setNotAuthorizedExceptionIsSet(true);
        }
      }
    }

  }

  public static class getResponses_args implements org.apache.thrift.TBase<getResponses_args, getResponses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResponses_args");

    private static final org.apache.thrift.protocol.TField EARLIEST_FIELD_DESC = new org.apache.thrift.protocol.TField("earliest", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientApplicationName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResponses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResponses_argsTupleSchemeFactory());
    }

    public String earliest; // required
    public String clientApplicationName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EARLIEST((short)1, "earliest"),
      CLIENT_APPLICATION_NAME((short)2, "clientApplicationName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EARLIEST
            return EARLIEST;
          case 2: // CLIENT_APPLICATION_NAME
            return CLIENT_APPLICATION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EARLIEST, new org.apache.thrift.meta_data.FieldMetaData("earliest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientApplicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResponses_args.class, metaDataMap);
    }

    public getResponses_args() {
    }

    public getResponses_args(
      String earliest,
      String clientApplicationName)
    {
      this();
      this.earliest = earliest;
      this.clientApplicationName = clientApplicationName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResponses_args(getResponses_args other) {
      if (other.isSetEarliest()) {
        this.earliest = other.earliest;
      }
      if (other.isSetClientApplicationName()) {
        this.clientApplicationName = other.clientApplicationName;
      }
    }

    public getResponses_args deepCopy() {
      return new getResponses_args(this);
    }

    @Override
    public void clear() {
      this.earliest = null;
      this.clientApplicationName = null;
    }

    public String getEarliest() {
      return this.earliest;
    }

    public getResponses_args setEarliest(String earliest) {
      this.earliest = earliest;
      return this;
    }

    public void unsetEarliest() {
      this.earliest = null;
    }

    /** Returns true if field earliest is set (has been assigned a value) and false otherwise */
    public boolean isSetEarliest() {
      return this.earliest != null;
    }

    public void setEarliestIsSet(boolean value) {
      if (!value) {
        this.earliest = null;
      }
    }

    public String getClientApplicationName() {
      return this.clientApplicationName;
    }

    public getResponses_args setClientApplicationName(String clientApplicationName) {
      this.clientApplicationName = clientApplicationName;
      return this;
    }

    public void unsetClientApplicationName() {
      this.clientApplicationName = null;
    }

    /** Returns true if field clientApplicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetClientApplicationName() {
      return this.clientApplicationName != null;
    }

    public void setClientApplicationNameIsSet(boolean value) {
      if (!value) {
        this.clientApplicationName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EARLIEST:
        if (value == null) {
          unsetEarliest();
        } else {
          setEarliest((String)value);
        }
        break;

      case CLIENT_APPLICATION_NAME:
        if (value == null) {
          unsetClientApplicationName();
        } else {
          setClientApplicationName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EARLIEST:
        return getEarliest();

      case CLIENT_APPLICATION_NAME:
        return getClientApplicationName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EARLIEST:
        return isSetEarliest();
      case CLIENT_APPLICATION_NAME:
        return isSetClientApplicationName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResponses_args)
        return this.equals((getResponses_args)that);
      return false;
    }

    public boolean equals(getResponses_args that) {
      if (that == null)
        return false;

      boolean this_present_earliest = true && this.isSetEarliest();
      boolean that_present_earliest = true && that.isSetEarliest();
      if (this_present_earliest || that_present_earliest) {
        if (!(this_present_earliest && that_present_earliest))
          return false;
        if (!this.earliest.equals(that.earliest))
          return false;
      }

      boolean this_present_clientApplicationName = true && this.isSetClientApplicationName();
      boolean that_present_clientApplicationName = true && that.isSetClientApplicationName();
      if (this_present_clientApplicationName || that_present_clientApplicationName) {
        if (!(this_present_clientApplicationName && that_present_clientApplicationName))
          return false;
        if (!this.clientApplicationName.equals(that.clientApplicationName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResponses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResponses_args typedOther = (getResponses_args)other;

      lastComparison = Boolean.valueOf(isSetEarliest()).compareTo(typedOther.isSetEarliest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEarliest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliest, typedOther.earliest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientApplicationName()).compareTo(typedOther.isSetClientApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientApplicationName, typedOther.clientApplicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResponses_args(");
      boolean first = true;

      sb.append("earliest:");
      if (this.earliest == null) {
        sb.append("null");
      } else {
        sb.append(this.earliest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientApplicationName:");
      if (this.clientApplicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientApplicationName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResponses_argsStandardSchemeFactory implements SchemeFactory {
      public getResponses_argsStandardScheme getScheme() {
        return new getResponses_argsStandardScheme();
      }
    }

    private static class getResponses_argsStandardScheme extends StandardScheme<getResponses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResponses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EARLIEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.earliest = iprot.readString();
                struct.setEarliestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientApplicationName = iprot.readString();
                struct.setClientApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResponses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.earliest != null) {
          oprot.writeFieldBegin(EARLIEST_FIELD_DESC);
          oprot.writeString(struct.earliest);
          oprot.writeFieldEnd();
        }
        if (struct.clientApplicationName != null) {
          oprot.writeFieldBegin(CLIENT_APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.clientApplicationName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResponses_argsTupleSchemeFactory implements SchemeFactory {
      public getResponses_argsTupleScheme getScheme() {
        return new getResponses_argsTupleScheme();
      }
    }

    private static class getResponses_argsTupleScheme extends TupleScheme<getResponses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResponses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEarliest()) {
          optionals.set(0);
        }
        if (struct.isSetClientApplicationName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEarliest()) {
          oprot.writeString(struct.earliest);
        }
        if (struct.isSetClientApplicationName()) {
          oprot.writeString(struct.clientApplicationName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResponses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.earliest = iprot.readString();
          struct.setEarliestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientApplicationName = iprot.readString();
          struct.setClientApplicationNameIsSet(true);
        }
      }
    }

  }

  public static class getResponses_result implements org.apache.thrift.TBase<getResponses_result, getResponses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResponses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthenticatedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_AUTHORIZED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notAuthorizedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResponses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResponses_resultTupleSchemeFactory());
    }

    public List<Response> success; // required
    public NotAuthenticatedException notAuthenticatedException; // required
    public NotAuthorizedException notAuthorizedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      NOT_AUTHENTICATED_EXCEPTION((short)1, "notAuthenticatedException"),
      NOT_AUTHORIZED_EXCEPTION((short)2, "notAuthorizedException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NOT_AUTHENTICATED_EXCEPTION
            return NOT_AUTHENTICATED_EXCEPTION;
          case 2: // NOT_AUTHORIZED_EXCEPTION
            return NOT_AUTHORIZED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class))));
      tmpMap.put(_Fields.NOT_AUTHENTICATED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthenticatedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_AUTHORIZED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notAuthorizedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResponses_result.class, metaDataMap);
    }

    public getResponses_result() {
    }

    public getResponses_result(
      List<Response> success,
      NotAuthenticatedException notAuthenticatedException,
      NotAuthorizedException notAuthorizedException)
    {
      this();
      this.success = success;
      this.notAuthenticatedException = notAuthenticatedException;
      this.notAuthorizedException = notAuthorizedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResponses_result(getResponses_result other) {
      if (other.isSetSuccess()) {
        List<Response> __this__success = new ArrayList<Response>();
        for (Response other_element : other.success) {
          __this__success.add(new Response(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetNotAuthenticatedException()) {
        this.notAuthenticatedException = new NotAuthenticatedException(other.notAuthenticatedException);
      }
      if (other.isSetNotAuthorizedException()) {
        this.notAuthorizedException = new NotAuthorizedException(other.notAuthorizedException);
      }
    }

    public getResponses_result deepCopy() {
      return new getResponses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.notAuthenticatedException = null;
      this.notAuthorizedException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Response> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Response elem) {
      if (this.success == null) {
        this.success = new ArrayList<Response>();
      }
      this.success.add(elem);
    }

    public List<Response> getSuccess() {
      return this.success;
    }

    public getResponses_result setSuccess(List<Response> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotAuthenticatedException getNotAuthenticatedException() {
      return this.notAuthenticatedException;
    }

    public getResponses_result setNotAuthenticatedException(NotAuthenticatedException notAuthenticatedException) {
      this.notAuthenticatedException = notAuthenticatedException;
      return this;
    }

    public void unsetNotAuthenticatedException() {
      this.notAuthenticatedException = null;
    }

    /** Returns true if field notAuthenticatedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthenticatedException() {
      return this.notAuthenticatedException != null;
    }

    public void setNotAuthenticatedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthenticatedException = null;
      }
    }

    public NotAuthorizedException getNotAuthorizedException() {
      return this.notAuthorizedException;
    }

    public getResponses_result setNotAuthorizedException(NotAuthorizedException notAuthorizedException) {
      this.notAuthorizedException = notAuthorizedException;
      return this;
    }

    public void unsetNotAuthorizedException() {
      this.notAuthorizedException = null;
    }

    /** Returns true if field notAuthorizedException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotAuthorizedException() {
      return this.notAuthorizedException != null;
    }

    public void setNotAuthorizedExceptionIsSet(boolean value) {
      if (!value) {
        this.notAuthorizedException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Response>)value);
        }
        break;

      case NOT_AUTHENTICATED_EXCEPTION:
        if (value == null) {
          unsetNotAuthenticatedException();
        } else {
          setNotAuthenticatedException((NotAuthenticatedException)value);
        }
        break;

      case NOT_AUTHORIZED_EXCEPTION:
        if (value == null) {
          unsetNotAuthorizedException();
        } else {
          setNotAuthorizedException((NotAuthorizedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case NOT_AUTHENTICATED_EXCEPTION:
        return getNotAuthenticatedException();

      case NOT_AUTHORIZED_EXCEPTION:
        return getNotAuthorizedException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case NOT_AUTHENTICATED_EXCEPTION:
        return isSetNotAuthenticatedException();
      case NOT_AUTHORIZED_EXCEPTION:
        return isSetNotAuthorizedException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResponses_result)
        return this.equals((getResponses_result)that);
      return false;
    }

    public boolean equals(getResponses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_notAuthenticatedException = true && this.isSetNotAuthenticatedException();
      boolean that_present_notAuthenticatedException = true && that.isSetNotAuthenticatedException();
      if (this_present_notAuthenticatedException || that_present_notAuthenticatedException) {
        if (!(this_present_notAuthenticatedException && that_present_notAuthenticatedException))
          return false;
        if (!this.notAuthenticatedException.equals(that.notAuthenticatedException))
          return false;
      }

      boolean this_present_notAuthorizedException = true && this.isSetNotAuthorizedException();
      boolean that_present_notAuthorizedException = true && that.isSetNotAuthorizedException();
      if (this_present_notAuthorizedException || that_present_notAuthorizedException) {
        if (!(this_present_notAuthorizedException && that_present_notAuthorizedException))
          return false;
        if (!this.notAuthorizedException.equals(that.notAuthorizedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResponses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResponses_result typedOther = (getResponses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotAuthenticatedException()).compareTo(typedOther.isSetNotAuthenticatedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthenticatedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthenticatedException, typedOther.notAuthenticatedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotAuthorizedException()).compareTo(typedOther.isSetNotAuthorizedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotAuthorizedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAuthorizedException, typedOther.notAuthorizedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResponses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notAuthenticatedException:");
      if (this.notAuthenticatedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthenticatedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notAuthorizedException:");
      if (this.notAuthorizedException == null) {
        sb.append("null");
      } else {
        sb.append(this.notAuthorizedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResponses_resultStandardSchemeFactory implements SchemeFactory {
      public getResponses_resultStandardScheme getScheme() {
        return new getResponses_resultStandardScheme();
      }
    }

    private static class getResponses_resultStandardScheme extends StandardScheme<getResponses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResponses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Response>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Response _elem10; // required
                    _elem10 = new Response();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // NOT_AUTHENTICATED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthenticatedException = new NotAuthenticatedException();
                struct.notAuthenticatedException.read(iprot);
                struct.setNotAuthenticatedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_AUTHORIZED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notAuthorizedException = new NotAuthorizedException();
                struct.notAuthorizedException.read(iprot);
                struct.setNotAuthorizedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResponses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Response _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.notAuthenticatedException != null) {
          oprot.writeFieldBegin(NOT_AUTHENTICATED_EXCEPTION_FIELD_DESC);
          struct.notAuthenticatedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notAuthorizedException != null) {
          oprot.writeFieldBegin(NOT_AUTHORIZED_EXCEPTION_FIELD_DESC);
          struct.notAuthorizedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResponses_resultTupleSchemeFactory implements SchemeFactory {
      public getResponses_resultTupleScheme getScheme() {
        return new getResponses_resultTupleScheme();
      }
    }

    private static class getResponses_resultTupleScheme extends TupleScheme<getResponses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResponses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetNotAuthenticatedException()) {
          optionals.set(1);
        }
        if (struct.isSetNotAuthorizedException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Response _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetNotAuthenticatedException()) {
          struct.notAuthenticatedException.write(oprot);
        }
        if (struct.isSetNotAuthorizedException()) {
          struct.notAuthorizedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResponses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Response>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Response _elem15; // required
              _elem15 = new Response();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notAuthenticatedException = new NotAuthenticatedException();
          struct.notAuthenticatedException.read(iprot);
          struct.setNotAuthenticatedExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notAuthorizedException = new NotAuthorizedException();
          struct.notAuthorizedException.read(iprot);
          struct.setNotAuthorizedExceptionIsSet(true);
        }
      }
    }

  }

}
